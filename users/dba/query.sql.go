// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: query.sql

package usermodel

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
  auth, name, email, pwd, departure, profile
) VALUES (
  ?, ?, ?,
  SHA2(pwd, 256),
  ?,
  '/img/logo.png'
)
`

type CreateUserParams struct {
	Auth      int32  `json:"auth"`
	Name      string `json:"name"`
	Email     string `json:"email"`
	Departure string `json:"departure"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser,
		arg.Auth,
		arg.Name,
		arg.Email,
		arg.Departure,
	)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
/*
  id          BIGINT  NOT NULL AUTO_INCREMENT PRIMARY KEY,
  auth        int     NOT NULL DEFAULT 0,
  name        varchar(32)    NOT NULL,
  email       varchar(256)   NOT NULL,
  pwd         varchar(256)   NOT NULL,
  departure   varchar(32)    NOT NULL DEFAULT '대기중',
  profile     varchar(512)   NOT NULL DEFAULT '/img/logo.png',
  created_at  DATETIME       NOT NULL DEFAULT NOW(),
  updated_at  DATETIME       NOT NULL DEFAULT NOW()
*/

SELECT id, auth, name, email, pwd, departure, profile, created_at, updated_at FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (*User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Auth,
		&i.Name,
		&i.Email,
		&i.Pwd,
		&i.Departure,
		&i.Profile,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
  id, auth, name, email, departure, profile, created_at, updated_at
FROM users
ORDER BY id
`

type ListUsersRow struct {
	ID        int64     `json:"id"`
	Auth      int32     `json:"auth"`
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	Departure string    `json:"departure"`
	Profile   string    `json:"profile"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) ListUsers(ctx context.Context) ([]*ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListUsersRow{}
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Auth,
			&i.Name,
			&i.Email,
			&i.Departure,
			&i.Profile,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :execresult
UPDATE users SET
  auth=?,
  pwd=?,
  departure=?,
  profile=?
WHERE
  id = ?
`

type UpdateUserParams struct {
	Auth      int32  `json:"auth"`
	Pwd       string `json:"pwd"`
	Departure string `json:"departure"`
	Profile   string `json:"profile"`
	ID        int64  `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateUser,
		arg.Auth,
		arg.Pwd,
		arg.Departure,
		arg.Profile,
		arg.ID,
	)
}
